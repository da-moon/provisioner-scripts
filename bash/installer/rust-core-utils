#!/usr/bin/env bash
set -o errtrace
set -o functrace
set -o errexit
set -o nounset
set -o pipefail
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
if [ ! $(which sudo) ]; then
	echo 'Please install "sudo" package' 1>&2
	exit 1
fi
if [[ $EUID -eq 0 ]]; then
   echo "You must run this script as non-root user with sudo permission." 1>&2
   exit 1
fi
if [ -n "$(command -v apt-get)" ]; then
  echo "*** Detected Debian based Linux" 1>&2
  export DEBIAN_FRONTEND=noninteractive
  sudo apt-get update -qq > /dev/null 2>&1
  sudo apt-get install jq curl libssl-dev -yqq > /dev/null 2>&1
fi
if [ ! $(which curl) ]; then
  echo 'Please install "curl" package' 1>&2
  exit 1
fi
if [ ! $(which wget) ]; then
  echo 'Please install "wget" package' 1>&2
  exit 1
fi
if [ ! $(which jq) ]; then
  echo 'Please install "jq" package' 1>&2
  exit 1
fi
if [ ! -n "$(command -v ripgrep)" ]; then
  echo "*** installing ripgrep" 1>&2
  rm -rf /tmp/ripgrep*
  mkdir -p /tmp/ripgrep
  curl -sL https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | jq -r '.assets[]|select(.browser_download_url | (contains("linux") and contains("x86_64") and (contains("sha256") | not))).browser_download_url' | xargs -I {} wget --quiet --no-cache -O /tmp/ripgrep.tar.gz {}
  sudo tar \
  -xzf /tmp/ripgrep.tar.gz \
  -C /tmp/ripgrep \
  --strip-components=1
  sudo mv /tmp/ripgrep/rg /usr/local/bin/rg
  sudo mv /tmp/ripgrep/complete/rg.bash  /etc/bash_completion.d/rg.bash
  sudo chmod +x /usr/local/bin/rg
  sudo rm -r /tmp/ripgrep*
fi
if [ ! -n "$(command -v exa)" ]; then
  echo "*** installing exa" 1>&2
  rm -rf /tmp/exa
  mkdir -p /tmp/exa
  curl -sL https://api.github.com/repos/ogham/exa/releases/latest | \
    jq -r '.assets[]|
          select(
            .browser_download_url |
            (
              contains("linux")  and
              (contains("sha256") | not)
            )
          ).browser_download_url' | xargs -I {} wget -qO /tmp/exa/exa.zip {}
  unzip -d /tmp/exa /tmp/exa/exa.zip
  rm /tmp/exa/exa.zip
  sudo mv /tmp/exa/exa-linux-x86_64 /usr/local/bin/exa
  rm -rf /tmp/exa
  sudo chmod +x /usr/local/bin/exa || true
fi
if [ ! -n "$(command -v bat)" ]; then
  echo "*** installing bat" 1>&2
  rm -rf /tmp/bat
  mkdir -p /tmp/bat
  if grep -qF 'debian' /etc/os-release; then
    curl -sL https://api.github.com/repos/sharkdp/bat/releases/latest | jq -r '.assets[]|
      select(
        .browser_download_url |
        (
          contains("amd64")  and
          contains("deb")  and
          (contains("musl") | not) and
          (contains("sha256") | not)
        )
      ).browser_download_url' | xargs -I {} wget -qO /tmp/bat/bat.deb {} > /dev/null 2>&1
      sudo dpkg -i /tmp/bat/bat.deb
      sudo apt -f install -yqq > /dev/null 2>&1
  else
    curl -sL https://api.github.com/repos/sharkdp/bat/releases/latest | jq -r '.assets[]|
            select(
              .browser_download_url |
              (
                contains("linux")  and
                contains("x86_64")  and
                contains("musl")  and
                (contains("sha256") | not)
              )
            ).browser_download_url' | xargs -I {} wget -qO /tmp/bat/bat.tar.gz {}
    tar \
      -xzf /tmp/bat/bat.tar.gz \
      -C /tmp/bat \
      --strip-components=1
    rm -rf /tmp/bat/bat.tar.gz
    sudo mv /tmp/bat/bat /usr/local/bin/
  fi
  rm -rf /tmp/bat
  sudo chmod +x /usr/local/bin/bat || true
fi
if [ ! -n "$(command -v nu)" ]; then
  echo "*** installing nushell" 1>&2
  rm -rf /tmp/nushell
  mkdir -p /tmp/nushell
  curl -sL https://api.github.com/repos/nushell/nushell/releases/latest | jq -r '.assets[]|select(.browser_download_url | (contains("linux")  and (contains("sha256") | not))).browser_download_url' | xargs -I {} wget -qO /tmp/nushell/nushell.tar.gz {}
  tar \
  -xzf /tmp/nushell/nushell.tar.gz \
  -C /tmp/nushell \
  --strip-components=2
  rm -rf /tmp/nushell/nushell.tar.gz
  sudo mv /tmp/nushell/nu* /usr/local/bin/
  rm -rf /tmp/nushell
  sudo chmod +x /usr/local/bin/nu* || true
fi
if [ ! -n "$(command -v ag)" ]; then
  echo "*** installing angle-grinder" 1>&2
  rm -rf /tmp/ag
  mkdir -p /tmp/ag
  curl -sL https://api.github.com/repos/rcoh/angle-grinder/releases/latest | jq -r '.assets[]|
          select(
            .browser_download_url |
            (
              contains("linux")  and
              contains("x86_64")  and
              contains("gnu")  and
              (contains("sha256") | not)
            )
          ).browser_download_url' | xargs -I {} wget -qO /tmp/ag/ag.tar.gz {}
  tar \
    -xzf /tmp/ag/ag.tar.gz \
    -C /tmp/ag
  rm -rf /tmp/ag/ag.tar.gz
  sudo mv /tmp/ag/agrind /usr/local/bin/ag
  rm -rf /tmp/agrind
  sudo chmod +x /usr/local/bin/ag || true
fi
if [ ! -n "$(command -v sd)" ]; then
  echo "*** installing sd" 1>&2
  rm -rf /tmp/sd
  mkdir -p /tmp/sd
  curl -sL https://api.github.com/repos/chmln/sd/releases/latest | jq -r '.assets[]|
          select(
            .browser_download_url |
            (
              contains("linux")  and
              contains("x86_64")  and
              contains("musl")  and
              (contains("sha256") | not)
            )
          ).browser_download_url' | xargs -I {} wget -qO /tmp/sd/sd {}
  sudo mv /tmp/sd/sd /usr/local/bin/sd
  rm -rf /tmp/sd
  sudo chmod +x /usr/local/bin/sd || true
fi
if [ ! -n "$(command -v hyperfine)" ]; then
  echo "*** installing hyperfine" 1>&2
  rm -rf /tmp/hyperfine
  mkdir -p /tmp/hyperfine
  if grep -qF 'debian' /etc/os-release; then
    curl -sL https://api.github.com/repos/sharkdp/hyperfine/releases/latest | jq -r '.assets[]|
      select(
        .browser_download_url |
        (
          contains("amd64")  and
          contains("deb")  and
          (contains("musl") | not) and
          (contains("sha256") | not)
        )
      ).browser_download_url' | xargs -I {} wget -qO /tmp/hyperfine/hyperfine.deb {} > /dev/null 2>&1
      sudo dpkg -i /tmp/hyperfine/hyperfine.deb
      sudo apt -f install -yqq > /dev/null 2>&1
  else
    curl -sL https://api.github.com/repos/sharkdp/hyperfine/releases/latest | jq -r '.assets[]|
            select(
              .browser_download_url |
              (
                contains("linux")  and
                contains("x86_64")  and
                contains("musl")  and
                (contains("sha256") | not)
              )
            ).browser_download_url' | xargs -I {} wget -qO /tmp/hyperfine/hyperfine.tar.gz {}
    tar \
      -xzf /tmp/hyperfine/hyperfine.tar.gz \
      -C /tmp/hyperfine \
      --strip-components=1
    rm -rf /tmp/hyperfine/hyperfine.tar.gz
    sudo mv /tmp/hyperfine/hyperfine /usr/local/bin/
  fi
  rm -rf /tmp/hyperfine
  sudo chmod +x /usr/local/bin/hyperfine || true
fi


if [ ! -n "$(command -v fd)" ]; then
  echo "*** installing fd" 1>&2
  rm -rf /tmp/fd
  mkdir -p /tmp/fd
  if grep -qF 'debian' /etc/os-release; then
    curl -sL https://api.github.com/repos/sharkdp/fd/releases/latest | jq -r '.assets[]|
      select(
        .browser_download_url |
        (
          contains("amd64")  and
          contains("deb")  and
          (contains("musl") | not) and
          (contains("sha256") | not)
        )
      ).browser_download_url' | xargs -I {} wget -qO /tmp/fd/fd.deb {} > /dev/null 2>&1
      sudo dpkg -i /tmp/fd/fd.deb
      sudo apt -f install -yqq > /dev/null 2>&1
  else
    curl -sL https://api.github.com/repos/sharkdp/fd/releases/latest | jq -r '.assets[]|
            select(
              .browser_download_url |
              (
                contains("linux")  and
                contains("x86_64")  and
                contains("musl")  and
                (contains("sha256") | not)
              )
            ).browser_download_url' | xargs -I {} wget -qO /tmp/fd/fd.tar.gz {}
    tar \
      -xzf /tmp/fd/fd.tar.gz \
      -C /tmp/fd \
      --strip-components=1
    rm -rf /tmp/fd/fd.tar.gz
    sudo mv /tmp/fd/fd /usr/local/bin/
  fi
  rm -rf /tmp/fd
  sudo chmod +x /usr/local/bin/fd || true
fi
if [ ! -n "$(command -v procs)" ]; then
  echo "*** installing procs" 1>&2
  rm -rf /tmp/procs
  mkdir -p /tmp/procs
  curl -sL https://api.github.com/repos/dalance/procs/releases/latest | \
    jq -r '.assets[]|
          select(
            .browser_download_url |
            (
              contains("lnx")  and
              (contains("sha256") | not)
            )
          ).browser_download_url' | xargs -I {} wget -qO /tmp/procs/procs.zip {}
  unzip -d /tmp/procs /tmp/procs/procs.zip
  rm /tmp/procs/procs.zip
  sudo mv /tmp/procs/procs /usr/local/bin/procs
  rm -rf /tmp/procs
  sudo chmod +x /usr/local/bin/procs || true
fi